{"ast":null,"code":"import _classCallCheck from\"/Users/shanchuangxin/Desktop/code/restructure/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/shanchuangxin/Desktop/code/restructure/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/shanchuangxin/Desktop/code/restructure/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/shanchuangxin/Desktop/code/restructure/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component,Fragment}from\"react\";import{withRouter}from\"react-router-dom\";// 加载项目列表。列表中每一项都是一个项目对象，该对象包含了项目的信息。\nimport{projects}from\"../../data/projects\";import\"./ProjectPage.css\";// 单个项目详情页面\nvar ProjectPage=/*#__PURE__*/function(_Component){_inherits(ProjectPage,_Component);var _super=_createSuper(ProjectPage);function ProjectPage(props){var _this;_classCallCheck(this,ProjectPage);_this=_super.call(this,props);// 从url中获取用户选取的项目名字\nvar slug=_this.props.match.params.name;// 根据用户选取的项目，从项目列表中选取出来。\n// slug为项目详情中的项目简称，与路由搭配使用\n_this.project=projects.find(function(obj){return obj.slug===slug;});return _this;}_createClass(ProjectPage,[{key:\"render\",value:function render(){var project=this.project;var awards;// 如果项目有awards的信息，则编写对应的jsx语句\nif(project.awards&&project.awards.length>0){awards=project.awards.map(function(award,no){return/*#__PURE__*/React.createElement(\"div\",{className:\"p--award\",key:no},/*#__PURE__*/React.createElement(\"img\",{src:award.image,alt:award.organization+' logo'}),/*#__PURE__*/React.createElement(\"label\",null,award.organization),/*#__PURE__*/React.createElement(\"div\",null,award.name));});awards=/*#__PURE__*/React.createElement(\"div\",{className:\"p--awards\"},awards);}return/*#__PURE__*/ (// Fragment 是一个编译后被删除的节点，目的是用来把所有的节点放进一个节点里（render只能return一个节点）\nReact.createElement(Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"p--splash\"},/*#__PURE__*/React.createElement(\"div\",{className:\"p--overlay\"}),/*#__PURE__*/React.createElement(\"img\",{src:project.cover,alt:project.title+' cover photo'}),/*#__PURE__*/React.createElement(\"div\",{className:\"p--title\"},project.title)),/*#__PURE__*/React.createElement(\"div\",{className:\"p--content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"p--details\"},/*#__PURE__*/React.createElement(\"div\",{className:\"p--details-column\"},/*#__PURE__*/React.createElement(\"div\",{className:\"p--detail\"},project.components,/*#__PURE__*/React.createElement(\"label\",null,\"Components\")),/*#__PURE__*/React.createElement(\"div\",{className:\"p--detail\"},project.type,/*#__PURE__*/React.createElement(\"label\",null,\"Type\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"p--details-column\"},/*#__PURE__*/React.createElement(\"div\",{className:\"p--detail\"},project.client,/*#__PURE__*/React.createElement(\"label\",null,\"Client\")),/*#__PURE__*/React.createElement(\"div\",{className:\"p--detail\"},project.location,/*#__PURE__*/React.createElement(\"label\",null,\"Location\")))),/*#__PURE__*/React.createElement(\"div\",{className:\"p--summary\"},project.summary),/*#__PURE__*/React.createElement(\"div\",{className:\"p--body\"},project.body),awards)));}}]);return ProjectPage;}(Component);export default withRouter(ProjectPage);","map":{"version":3,"sources":["/Users/shanchuangxin/Desktop/code/restructure/src/pages/ProjectPage/ProjectPage.js"],"names":["React","Component","Fragment","withRouter","projects","ProjectPage","props","slug","match","params","name","project","find","obj","awards","length","map","award","no","image","organization","cover","title","components","type","client","location","summary","body"],"mappings":"goBAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,KAAyC,OAAzC,CACA,OAAQC,UAAR,KAAyB,kBAAzB,CAEA;AACA,OAAQC,QAAR,KAAuB,qBAAvB,CAEA,MAAO,mBAAP,CAEA;GACMC,CAAAA,W,0GAEF,qBAAYC,KAAZ,CAAmB,6CACf,uBAAMA,KAAN,EACA;AACA,GAAIC,CAAAA,IAAI,CAAG,MAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,IAAnC,CAEA;AACA;AACA,MAAKC,OAAL,CAAeP,QAAQ,CAACQ,IAAT,CAAc,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACN,IAAJ,GAAaA,IAAjB,EAAjB,CAAf,CAPe,aAQlB,C,+DAEQ,CAEL,GAAII,CAAAA,OAAO,CAAG,KAAKA,OAAnB,CAEA,GAAIG,CAAAA,MAAJ,CACA;AACA,GAAIH,OAAO,CAACG,MAAR,EAAkBH,OAAO,CAACG,MAAR,CAAeC,MAAf,CAAwB,CAA9C,CAAiD,CAC7CD,MAAM,CAAGH,OAAO,CAACG,MAAR,CAAeE,GAAf,CAAmB,SAACC,KAAD,CAAQC,EAAR,qBACxB,2BAAK,SAAS,CAAE,UAAhB,CAA4B,GAAG,CAAEA,EAAjC,eAEI,2BAAK,GAAG,CAAED,KAAK,CAACE,KAAhB,CAAuB,GAAG,CAAEF,KAAK,CAACG,YAAN,CAAqB,OAAjD,EAFJ,cAII,iCAAQH,KAAK,CAACG,YAAd,CAJJ,cAMI,+BAAMH,KAAK,CAACP,IAAZ,CANJ,CADwB,EAAnB,CAAT,CAUAI,MAAM,cAAG,2BAAK,SAAS,CAAE,WAAhB,EAA8BA,MAA9B,CAAT,CACH,CAED,oBACI;AACA,oBAAC,QAAD,mBAEI,2BAAK,SAAS,CAAE,WAAhB,eAEI,2BAAK,SAAS,CAAE,YAAhB,EAFJ,cAII,2BAAK,GAAG,CAAEH,OAAO,CAACU,KAAlB,CAAyB,GAAG,CAAEV,OAAO,CAACW,KAAR,CAAgB,cAA9C,EAJJ,cAMI,2BAAK,SAAS,CAAE,UAAhB,EAA6BX,OAAO,CAACW,KAArC,CANJ,CAFJ,cAYI,2BAAK,SAAS,CAAE,YAAhB,eAGI,2BAAK,SAAS,CAAE,YAAhB,eAEI,2BAAK,SAAS,CAAE,mBAAhB,eACI,2BAAK,SAAS,CAAE,WAAhB,EAEKX,OAAO,CAACY,UAFb,cAGI,8CAHJ,CADJ,cAMI,2BAAK,SAAS,CAAE,WAAhB,EAEKZ,OAAO,CAACa,IAFb,cAGI,wCAHJ,CANJ,CAFJ,cAeI,2BAAK,SAAS,CAAE,mBAAhB,eACI,2BAAK,SAAS,CAAE,WAAhB,EAEKb,OAAO,CAACc,MAFb,cAGI,0CAHJ,CADJ,cAMI,2BAAK,SAAS,CAAE,WAAhB,EAEKd,OAAO,CAACe,QAFb,cAGI,4CAHJ,CANJ,CAfJ,CAHJ,cAiCI,2BAAK,SAAS,CAAE,YAAhB,EACKf,OAAO,CAACgB,OADb,CAjCJ,cAsCI,2BAAK,SAAS,CAAE,SAAhB,EACKhB,OAAO,CAACiB,IADb,CAtCJ,CA2CKd,MA3CL,CAZJ,CAFJ,EAgEH,C,yBAhGqBb,S,EAoG1B,cAAeE,CAAAA,UAAU,CAACE,WAAD,CAAzB","sourcesContent":["import React, {Component, Fragment} from \"react\"\nimport {withRouter} from \"react-router-dom\"\n\n// 加载项目列表。列表中每一项都是一个项目对象，该对象包含了项目的信息。\nimport {projects} from \"../../data/projects\";\n\nimport \"./ProjectPage.css\"\n\n// 单个项目详情页面\nclass ProjectPage extends Component {\n\n    constructor(props) {\n        super(props)\n        // 从url中获取用户选取的项目名字\n        let slug = this.props.match.params.name\n\n        // 根据用户选取的项目，从项目列表中选取出来。\n        // slug为项目详情中的项目简称，与路由搭配使用\n        this.project = projects.find(obj => obj.slug === slug)\n    }\n\n    render() {\n\n        let project = this.project\n\n        let awards;\n        // 如果项目有awards的信息，则编写对应的jsx语句\n        if (project.awards && project.awards.length > 0) {\n            awards = project.awards.map((award, no) =>\n                <div className={\"p--award\"} key={no}>\n                    {/* 评奖组织的logo */}\n                    <img src={award.image} alt={award.organization + ' logo'}/>\n                    {/* 评奖组织的名字 */}\n                    <label>{award.organization}</label>\n                    {/* 获奖名称 */}\n                    <div>{award.name}</div>\n                </div>\n            )\n            awards = <div className={\"p--awards\"}>{awards}</div>\n        }\n\n        return (\n            // Fragment 是一个编译后被删除的节点，目的是用来把所有的节点放进一个节点里（render只能return一个节点）\n            <Fragment> \n                {/* 主视图效果部分 */}\n                <div className={\"p--splash\"}>\n                    {/* 最上方蒙板 */}\n                    <div className={\"p--overlay\"}>{}</div>\n                    {/* 代表项目的图片 */}\n                    <img src={project.cover} alt={project.title + ' cover photo'} />\n                    {/* 项目的标题 */}\n                    <div className={\"p--title\"}>{project.title}</div>\n                </div>\n\n                {/* 项目的内容介绍 */}\n                <div className={\"p--content\"}>\n\n                    {/* 项目的详细信息 */}\n                    <div className={\"p--details\"}>\n                        {/* 第一列信息 */}\n                        <div className={\"p--details-column\"}>\n                            <div className={\"p--detail\"}>\n                                {/* 项目使用了哪些技术 */}\n                                {project.components}\n                                <label>Components</label>\n                            </div>\n                            <div className={\"p--detail\"}>\n                                {/* 项目的类型 */}\n                                {project.type}\n                                <label>Type</label>\n                            </div>\n                        </div>\n                        {/* 第二列信息 */}\n                        <div className={\"p--details-column\"}>\n                            <div className={\"p--detail\"}>\n                                {/* 项目的客户 */}\n                                {project.client}\n                                <label>Client</label>\n                            </div>\n                            <div className={\"p--detail\"}>\n                                {/* 项目的地点 */}\n                                {project.location}\n                                <label>Location</label>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* 项目的简介 */}\n                    <div className={\"p--summary\"}>\n                        {project.summary}\n                    </div>\n\n                    {/* 项目的主要介绍部分，不同的项目里面的内容也不同 */}\n                    <div className={\"p--body\"}>\n                        {project.body}\n                    </div>\n\n                    {/* 项目获奖情况 */}\n                    {awards}\n\n                </div>\n\n            </Fragment>\n        )\n\n    }\n\n}\n\nexport default withRouter(ProjectPage)"]},"metadata":{},"sourceType":"module"}